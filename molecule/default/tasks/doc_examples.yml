---
- name: Create TestCR resource
  k8s:
    definition:
      apiVersion: apps.example.com/v1alpha1
      kind: TestCR
      metadata:
        namespace: '{{ namespace }}'
        name: my-test
      spec:
        size: 2

- name: Set custom status fields on TestCR
  k8s_status:
    api_version: apps.example.com/v1alpha1
    kind: TestCR
    name: my-test
    namespace: '{{ namespace }}'
    status:
      hello: world
      custom: entries

- name: Get the custom resource
  k8s_info:
    api_version: apps.example.com/v1alpha1
    kind: TestCR
    name: my-test
    namespace: '{{ namespace }}'
  register: test_cr

- debug: var=test_cr

- assert:
    that:
      - test_cr.resources.0.status.hello == 'world'
      - test_cr.resources.0.status.custom == 'entries'

- name: Update the standard condition of an Ansible Operator
  k8s_status:
    api_version: apps.example.com/v1alpha1
    kind: TestCR
    name: my-test
    namespace: '{{ namespace }}'
    conditions:
      - type: Running
        status: "True"
        reason: MigrationStarted
        message: "Migration from v2 to v3 has begun"
        lastTransitionTime: "{{ lookup('pipe', 'date --rfc-3339 seconds') }}"

- name: Get the custom resource
  k8s_info:
    api_version: apps.example.com/v1alpha1
    kind: TestCR
    name: my-test
    namespace: '{{ namespace }}'
  register: test_cr

- debug: var=test_cr
- assert:
    that:
      - condition.type == 'Running'
      - condition.status == 'True'
      - condition.reason == 'MigrationStarted'
      - condition.message == 'Migration from v2 to v3 has begun'
      - condition.lastTransitionTime
  vars:
    condition: '{{ (test_cr.resources.0.status.conditions | selectattr("type", "equalto", "Running") | list ).0 }}'

- name: |
    Create custom conditions. WARNING: The default Ansible Operator status management
    will never overwrite custom conditions, so they will persist indefinitely. If you
    want the values to change or be removed, you will need to clean them up manually.
  k8s_status:
    api_version: apps.example.com/v1alpha1
    kind: TestCR
    name: my-test
    namespace: '{{ namespace }}'
    conditions:
      - type: Available
        status: "False"
        reason: PingFailed
        message: "The service did not respond to a ping"

- name: Get the custom resource
  k8s_info:
    api_version: apps.example.com/v1alpha1
    kind: TestCR
    name: my-test
    namespace: '{{ namespace }}'
  register: test_cr

- debug: var=test_cr
- assert:
    that:
      - condition.type == 'Available'
      - condition.status == 'False'
      - condition.reason == 'PingFailed'
      - condition.message == 'The service did not respond to a ping'
  vars:
    condition: '{{ (test_cr.resources.0.status.conditions | selectattr("type", "equalto", "Available") | list).0 }}'
